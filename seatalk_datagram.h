#define AUTOPILOT_DISPLAY_OFF 0x01
#define AUTOPILOT_DISPLAY_400G 0x02
#define AUTOPILOT_DISPLAY_NO_DATA 0x8
#define AUTOPILOT_DISPLAY_LARGE_XTE 0x10
#define AUTOPILOT_DISPLAY_AUTO_REL 0x80

#define AUTOPILOT_TYPE_400G 0x08
#define AUTOPILOT_TYPE_150G 0x05

typedef enum TIMER_MODE { TIMER_MODE_COUNT_UP, TIMER_MODE_COUNT_DOWN, TIMER_MODE_COUNT_UP_AND_START, TIMER_MODE_COUNT_DOWN_AND_START };
typedef enum COURSE_COMPUTER_FAILURE_TYPE { COURSE_COMPUTER_FAILURE_TYPE_NONE, COURSE_COMPUTER_FAILURE_TYPE_AUTO_RELEASE_ERROR, COURSE_COMPUTER_FAILURE_TYPE_DRIVE_STOPPED };
typedef enum ST_AUTOPILOT_MODE { ST_AUTOPILOT_MODE_STANDBY = 0x0, ST_AUTOPILOT_MODE_AUTO = 0x2, ST_AUTOPILOT_MODE_VANE = 0x4, ST_AUTOPILOT_MODE_TRACK = 0x8 };
typedef enum ST_AUTOPILOT_COMMAND {
  ST_AUTOPILOT_COMMAND_AUTO = 0x01,
  ST_AUTOPILOT_COMMAND_STANDBY = 0x02,
  ST_AUTOPILOT_COMMAND_TRACK = 0x03,
  ST_AUTOPILOT_COMAMND_DISP = 0x04,
  ST_AUTOPILOT_COMMAND_TURN_LEFT_1 = 0x05,
  ST_AUTOPILOT_COMMAND_TURN_LEFT_10 = 0x06,
  ST_AUTOPILOT_COMMAND_TURN_RIGHT_1 = 0x07,
  ST_AUTOPILOT_COMMAND_TURN_RIGHT_10 = 0x08,
  ST_AUTOPILOT_COMMAND_DECREASE_GAIN = 0x09,
  ST_AUTOPILOT_COMMAND_INCREASE_GAIN = 0x0a,
  ST_AUTOPILOT_COMMAND_TACK_LEFT = 0x21,
  ST_AUTOPILOT_COMMAND_TACK_RIGHT = 0x22,
  ST_AUTOPILOT_COMMAND_WIND_MODE = 0x23,
  ST_AUTOPILOT_COMMAND_TRACK_MODE = 0x28,
  ST_AUTOPILOT_COMMAND_RETURN_TO_COURSE = 0x41,
  ST_AUTOPILOT_COMMAND_ENTER_COMPASS_CALIBRATION_MODE = 0x42,
  ST_AUTOPILOT_COMMAND_PRESS_TRACK_LONGER = 0x43,
  ST_AUTOPILOT_COMMAND_PRESS_DISP_LONGER = 0x44,
  ST_AUTOPILOT_COMMAND_PRESS_LEFT_1_LONGER = 0x45,
  ST_AUTOPILOT_COMMAND_PRESS_LEFT_10_LONGER = 0x46,
  ST_AUTOPILOT_COMMAND_PRESS_RIGHT_1_LONGER = 0x47,
  ST_AUTOPILOT_COMMAND_PRESS_RIGHT_10_LONGER = 0x48,
  ST_AUTOPILOT_COMMAND_RETURN_TO_WIND_ANGLE = 0x63,
  ST_AUTOPILOT_COMMAND_PRESS_LEFT_10_RIGHT_10_LONGER = 0x68,
  ST_AUTOPILOT_COMMAND_ENTER_RUDDER_GAIN_MODE = 0x6e,
  ST_AUTOPILOT_COMMAND_HOLD_LEFT_1 = 0x80,
  ST_AUTOPILOT_COMMAND_HOLD_LEFT_10 = 0x81,
  ST_AUTOPILOT_COMMAND_HOLD_RIGHT_1 = 0x82,
  ST_AUTOPILOT_COMMAND_HOLD_RIGHT_10 = 0x83,
  ST_AUTOPILOT_COMMAND_RELEASE_HELD_KEY = 0x84
};

int get_datagram_length(char second_byte);
void handle_seatalk_datagram(char *datagram);

int build_heading(char *datagram, int heading, int locked_heading_active, int locked_heading);
